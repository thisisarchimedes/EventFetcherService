name: Deploy to Prod Stage

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EC2_USER: ubuntu
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}

  PSP_STRATEGY_CONFIG_BUCKET: ${{ vars.PSP_STRATEGY_CONFIG_BUCKET }}
  PSP_STRATEGY_CONFIG_FILE: ${{ vars.PSP_STRATEGY_CONFIG_FILE }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          yarn

      - name: Build
        run: yarn build

      - name: Lint Code
        run: npx eslint src/**/*.ts --ext .js,.jsx,.ts,.tsx --ignore-pattern /devops/

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EVENTS_FETCHER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EVENTS_FETCHER_SSH_KEY }}
          port: 22
          source: '.'
          target: '/srv'

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EVENTS_FETCHER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EVENTS_FETCHER_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd /srv
            yarn install
            pm2 stop eventsFetcher
            ENVIRONMENT="StableApp" AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} DOTENV_KEY='${{ secrets.DOTENV_KEY_STABLE }}' dotenvx run -- pm2 start 'PAT_TOKEN=${{secrets.PAT_TOKEN}} yarn start' --name eventsFetcher

  deploy-demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          yarn

      - name: Build
        run: yarn build

      - name: Lint Code
        run: npx eslint src/**/*.ts --ext .js,.jsx,.ts,.tsx --ignore-pattern /devops/

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEMO_EVENTS_FETCHER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.DEMO_EVENTS_FETCHER_SSH_KEY }}
          port: 22
          source: '.'
          target: '/srv'

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEMO_EVENTS_FETCHER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.DEMO_EVENTS_FETCHER_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd /srv
            yarn install
            pm2 stop eventsFetcher
            ENVIRONMENT="DemoApp" AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} DOTENV_KEY='${{ secrets.DOTENV_KEY_DEMO }}' dotenvx run -- pm2 start 'PAT_TOKEN=${{secrets.PAT_TOKEN}} yarn start' --name eventsFetcher

  report-devops-event-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-demo, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: List all commit SHAs involved in the push
        id: format_commits
        shell: bash
        run: |
          ./devops/github_actions_templates/get_commit_shas.sh ${{ github.event.before }} ${{ github.event.after }} > commit_shas.txt
          COMMIT_SHAS_JSON=$(cat commit_shas.txt)
          echo "::set-output name=commit_shas::$COMMIT_SHAS_JSON"

      - name: Report DevOps Event
        run: |
          yarn add axios dotenv
          node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} deploy '{"commit_ids": ${{ steps.format_commits.outputs.commit_shas }} }'

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
