name: Deploy to Prod Stage

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}

  PSP_STRATEGY_CONFIG_BUCKET: ${{ vars.PSP_STRATEGY_CONFIG_BUCKET }}
  PSP_STRATEGY_CONFIG_FILE: ${{ vars.PSP_STRATEGY_CONFIG_FILE }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Remove development dependencies
        run: npm prune --production

      - name: Prepare deployment package
        run: |
          mkdir -p deploy-package
          rsync -av --progress ./dist/ ./deploy-package/ --exclude test
          cp -r ./node_modules ./deploy-package/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS SAM CLI
        run: pip install --user aws-sam-cli

      - name: Package the SAM application
        run: sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket aws-sam-eventsfetcher

      - name: Deploy the SAM application
        id: deploy
        run: |
          sam deploy --debug --template-file packaged.yaml --stack-name EventProcessorStack --capabilities CAPABILITY_IAM --parameter-overrides \
          ParameterKey=Environment,ParameterValue="StableApp" \
          ParameterKey=NewRelicApiKey,ParameterValue=${{ secrets.NEW_RELIC_API_KEY }}

  deploy_demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Remove development dependencies
        run: npm prune --production

      - name: Prepare deployment package
        run: |
          mkdir -p deploy-package
          rsync -av --progress ./dist/ ./deploy-package/ --exclude test
          cp -r ./node_modules ./deploy-package/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS SAM CLI
        run: pip install --user aws-sam-cli

      - name: Package the SAM application
        run: sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket aws-sam-eventsfetcher

      - name: Deploy the SAM application
        id: deploy
        run: |
          sam deploy --debug --template-file packaged.yaml --stack-name EventProcessorStackDemo --capabilities CAPABILITY_IAM --parameter-overrides \
          ParameterKey=Environment,ParameterValue="DemoApp" \
          ParameterKey=NewRelicApiKey,ParameterValue=${{ secrets.NEW_RELIC_API_KEY }}

  report-devops-event-deploy:
      runs-on: ubuntu-latest
      needs: [deploy_demo, deploy]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            submodules: 'recursive'
            fetch-depth: 0
        
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '20.x'
            cache: 'yarn'
  
        - name: List all commit SHAs involved in the push
          id: format_commits
          shell: bash
          run: |
            ./devops/github_actions_templates/get_commit_shas.sh ${{ github.event.before }} ${{ github.event.after }} > commit_shas.txt
            COMMIT_SHAS_JSON=$(cat commit_shas.txt)
            echo "::set-output name=commit_shas::$COMMIT_SHAS_JSON"
  
        - name: Report DevOps Event
          run: |
            yarn add axios dotenv
            node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} deploy '{"commit_ids": ${{ steps.format_commits.outputs.commit_shas }} }'          
  
        - name: Slack Notification
          if: always()
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
