/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AuraAdapterBase {
  export type RewardDataStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type RewardDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface AuraWeightedPoolAdapterInterface extends utils.Interface {
  functions: {
    "AURA()": FunctionFragment;
    "AURA_BOOSTER()": FunctionFragment;
    "BAL()": FunctionFragment;
    "auraPid()": FunctionFragment;
    "auraRewardPool()": FunctionFragment;
    "claim()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "healthFactor()": FunctionFragment;
    "initialize(bytes32,address,uint256)": FunctionFragment;
    "isHealthy()": FunctionFragment;
    "lpBalance()": FunctionFragment;
    "multiPoolStrategy()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolId()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "setHealthFactor(uint256)": FunctionFragment;
    "storedUnderlyingBalance()": FunctionFragment;
    "tokenIndex()": FunctionFragment;
    "totalClaimable()": FunctionFragment;
    "underlyingBalance()": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AURA"
      | "AURA_BOOSTER"
      | "BAL"
      | "auraPid"
      | "auraRewardPool"
      | "claim"
      | "deposit"
      | "healthFactor"
      | "initialize"
      | "isHealthy"
      | "lpBalance"
      | "multiPoolStrategy"
      | "pool"
      | "poolId"
      | "rewardTokens"
      | "setHealthFactor"
      | "storedUnderlyingBalance"
      | "tokenIndex"
      | "totalClaimable"
      | "underlyingBalance"
      | "underlyingToken"
      | "vault"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AURA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AURA_BOOSTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BAL", values?: undefined): string;
  encodeFunctionData(functionFragment: "auraPid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auraRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isHealthy", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpBalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiPoolStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storedUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "AURA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AURA_BOOSTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BAL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auraPid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auraRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "healthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHealthy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiPoolStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface AuraWeightedPoolAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuraWeightedPoolAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AURA(overrides?: CallOverrides): Promise<[string]>;

    AURA_BOOSTER(overrides?: CallOverrides): Promise<[string]>;

    BAL(overrides?: CallOverrides): Promise<[string]>;

    auraPid(overrides?: CallOverrides): Promise<[BigNumber]>;

    auraRewardPool(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _minBalancerLpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    healthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _poolId: PromiseOrValue<BytesLike>,
      _multiPoolStrategy: PromiseOrValue<string>,
      _auraPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isHealthy(overrides?: CallOverrides): Promise<[boolean]>;

    lpBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lpBal: BigNumber }>;

    multiPoolStrategy(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[string]>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setHealthFactor(
      _newHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storedUnderlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimable(
      overrides?: CallOverrides
    ): Promise<[AuraAdapterBase.RewardDataStructOutput[]]>;

    underlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _minReceiveAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AURA(overrides?: CallOverrides): Promise<string>;

  AURA_BOOSTER(overrides?: CallOverrides): Promise<string>;

  BAL(overrides?: CallOverrides): Promise<string>;

  auraPid(overrides?: CallOverrides): Promise<BigNumber>;

  auraRewardPool(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    _minBalancerLpAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _poolId: PromiseOrValue<BytesLike>,
    _multiPoolStrategy: PromiseOrValue<string>,
    _auraPid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isHealthy(overrides?: CallOverrides): Promise<boolean>;

  lpBalance(overrides?: CallOverrides): Promise<BigNumber>;

  multiPoolStrategy(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<string>;

  rewardTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setHealthFactor(
    _newHealthFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimable(
    overrides?: CallOverrides
  ): Promise<AuraAdapterBase.RewardDataStructOutput[]>;

  underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _minReceiveAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AURA(overrides?: CallOverrides): Promise<string>;

    AURA_BOOSTER(overrides?: CallOverrides): Promise<string>;

    BAL(overrides?: CallOverrides): Promise<string>;

    auraPid(overrides?: CallOverrides): Promise<BigNumber>;

    auraRewardPool(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _minBalancerLpAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolId: PromiseOrValue<BytesLike>,
      _multiPoolStrategy: PromiseOrValue<string>,
      _auraPid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isHealthy(overrides?: CallOverrides): Promise<boolean>;

    lpBalance(overrides?: CallOverrides): Promise<BigNumber>;

    multiPoolStrategy(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<string>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setHealthFactor(
      _newHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimable(
      overrides?: CallOverrides
    ): Promise<AuraAdapterBase.RewardDataStructOutput[]>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _minReceiveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    AURA(overrides?: CallOverrides): Promise<BigNumber>;

    AURA_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    BAL(overrides?: CallOverrides): Promise<BigNumber>;

    auraPid(overrides?: CallOverrides): Promise<BigNumber>;

    auraRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _minBalancerLpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolId: PromiseOrValue<BytesLike>,
      _multiPoolStrategy: PromiseOrValue<string>,
      _auraPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isHealthy(overrides?: CallOverrides): Promise<BigNumber>;

    lpBalance(overrides?: CallOverrides): Promise<BigNumber>;

    multiPoolStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setHealthFactor(
      _newHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _minReceiveAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AURA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AURA_BOOSTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auraPid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auraRewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _minBalancerLpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    healthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _poolId: PromiseOrValue<BytesLike>,
      _multiPoolStrategy: PromiseOrValue<string>,
      _auraPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isHealthy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiPoolStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHealthFactor(
      _newHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storedUnderlyingBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _minReceiveAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
